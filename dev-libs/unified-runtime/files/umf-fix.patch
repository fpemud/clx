diff -Nur a/source/common/umf_pools/disjoint_pool_config_parser.cpp b/source/common/umf_pools/disjoint_pool_config_parser.cpp
--- a/source/common/umf_pools/disjoint_pool_config_parser.cpp	2024-12-06 10:03:11.000000000 -0800
+++ b/source/common/umf_pools/disjoint_pool_config_parser.cpp	2024-12-11 22:12:51.105675878 -0800
@@ -25,9 +25,13 @@
     return x * 1024 * 1024 * 1024;
 }
 
+umf_disjoint_pool_config_t::umf_disjoint_pool_config_t()
+    : SlabMinSize(0), MaxPoolableSize(0), Capacity(0),
+      MinBucketSize(UMF_DISJOINT_POOL_MIN_BUCKET_DEFAULT_SIZE), PoolTrace(0),
+      SharedLimits(nullptr), Name("disjoint_pool") {}
+
 DisjointPoolAllConfigs::DisjointPoolAllConfigs(int trace) {
     for (auto &Config : Configs) {
-        Config = umfDisjointPoolParamsDefault();
         Config.PoolTrace = trace;
     }
 
diff -Nur a/source/common/umf_pools/disjoint_pool_config_parser.hpp b/source/common/umf_pools/disjoint_pool_config_parser.hpp
--- a/source/common/umf_pools/disjoint_pool_config_parser.hpp	2024-12-06 10:03:11.000000000 -0800
+++ b/source/common/umf_pools/disjoint_pool_config_parser.hpp	2024-12-11 22:10:11.472336819 -0800
@@ -18,12 +18,28 @@
 namespace usm {
 enum DisjointPoolMemType { Host, Device, Shared, SharedReadOnly, All };
 
+typedef struct umf_disjoint_pool_config_t {
+    umf_disjoint_pool_config_t();
+
+    size_t SlabMinSize;
+    size_t MaxPoolableSize;
+    size_t Capacity;
+    size_t MinBucketSize;
+    int PoolTrace;
+    umf_disjoint_pool_shared_limits_t *SharedLimits;
+    const char *Name;
+} umf_disjoint_pool_config_t;
+
+using umfDisjointPoolParamsHandle =
+    std::unique_ptr<umf_disjoint_pool_params_t,
+                    decltype(&umfDisjointPoolParamsDestroy)>;
+
 // Stores configuration for all instances of USM allocator
 class DisjointPoolAllConfigs {
   public:
     size_t EnableBuffers = 1;
     std::shared_ptr<umf_disjoint_pool_shared_limits_t> limits;
-    umf_disjoint_pool_params_t Configs[DisjointPoolMemType::All];
+    umf_disjoint_pool_config_t Configs[DisjointPoolMemType::All];
 
     DisjointPoolAllConfigs(int trace = 0);
 };
@@ -54,6 +70,32 @@
 // "1;32M;host:1M,4,64K;device:1M,4,64K;shared:0,0,2M"
 DisjointPoolAllConfigs parseDisjointPoolConfig(const std::string &config,
                                                int trace = 1);
+
+static inline void UMF_CALL_THROWS(umf_result_t res) {
+    if (res != UMF_RESULT_SUCCESS) {
+        throw res;
+    }
+}
+
+static inline umfDisjointPoolParamsHandle
+getUmfParamsHandle(umf_disjoint_pool_config_t &config) {
+    umf_disjoint_pool_params_handle_t cHandle;
+    UMF_CALL_THROWS(umfDisjointPoolParamsCreate(&cHandle));
+
+    umfDisjointPoolParamsHandle handle(cHandle, &umfDisjointPoolParamsDestroy);
+    UMF_CALL_THROWS(
+        umfDisjointPoolParamsSetSlabMinSize(cHandle, config.SlabMinSize));
+    UMF_CALL_THROWS(umfDisjointPoolParamsSetMaxPoolableSize(
+        cHandle, config.MaxPoolableSize));
+    UMF_CALL_THROWS(umfDisjointPoolParamsSetCapacity(cHandle, config.Capacity));
+    UMF_CALL_THROWS(
+        umfDisjointPoolParamsSetMinBucketSize(cHandle, config.MinBucketSize));
+    UMF_CALL_THROWS(
+        umfDisjointPoolParamsSetSharedLimits(cHandle, config.SharedLimits));
+    UMF_CALL_THROWS(umfDisjointPoolParamsSetName(cHandle, config.Name));
+    UMF_CALL_THROWS(umfDisjointPoolParamsSetTrace(cHandle, config.PoolTrace));
+    return handle;
+}
 } // namespace usm
 
 #endif
